'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _htmlWebpackHarddiskPlugin = require('html-webpack-harddisk-plugin');

var _htmlWebpackHarddiskPlugin2 = _interopRequireDefault(_htmlWebpackHarddiskPlugin);

var _uglifyjsWebpackPlugin = require('uglifyjs-webpack-plugin');

var _uglifyjsWebpackPlugin2 = _interopRequireDefault(_uglifyjsWebpackPlugin);

var _writeFileWebpackPlugin = require('write-file-webpack-plugin');

var _writeFileWebpackPlugin2 = _interopRequireDefault(_writeFileWebpackPlugin);

var _openBrowser = require('react-dev-utils/openBrowser');

var _openBrowser2 = _interopRequireDefault(_openBrowser);

var _getWebpackCommonConfig = require('./config/getWebpackCommonConfig');

var _getWebpackCommonConfig2 = _interopRequireDefault(_getWebpackCommonConfig);

var _updateWebpackConfig = require('./config/updateWebpackConfig');

var _updateWebpackConfig2 = _interopRequireDefault(_updateWebpackConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var fs = require('fs');
var path = require('path');

var _require = require('./utils/escape-win-path'),
    escapeWinPath = _require.escapeWinPath;

var mkdirp = require('mkdirp');
var nunjucks = require('nunjucks');
var webpack = require('webpack');
var WebpackDevServer = require('webpack-dev-server');
var R = require('ramda');
var ghPages = require('gh-pages');
var getBishengConfig = require('./utils/get-bisheng-config');
var sourceData = require('./utils/source-data');
var generateFilesPath = require('./utils/generate-files-path');
var context = require('./context');

var entryTemplate = fs.readFileSync(path.join(__dirname, 'entry.nunjucks.js')).toString();
var routesTemplate = fs.readFileSync(path.join(__dirname, 'routes.nunjucks.js')).toString();
var tmpDirPath = path.join(__dirname, '..', 'tmp');
mkdirp.sync(tmpDirPath);

function getDefaultOfModule(module) {
  return module.default || module;
}

function getRoutesPath(configPath, themePath, configEntryName) {
  var routesPath = path.join(tmpDirPath, 'routes.' + configEntryName + '.js');
  var themeConfig = require(escapeWinPath(configPath)).themeConfig || {};
  fs.writeFileSync(routesPath, nunjucks.renderString(routesTemplate, {
    themePath: escapeWinPath(themePath),
    themeConfig: JSON.stringify(themeConfig),
    themeRoutes: JSON.stringify(getDefaultOfModule(require(themePath)).routes)
  }));
  return routesPath;
}

function generateEntryFile(configPath, configTheme, configEntryName, root) {
  var entryPath = path.join(tmpDirPath, 'entry.' + configEntryName + '.js');
  var routesPath = getRoutesPath(configPath, path.dirname(configTheme), configEntryName);
  fs.writeFileSync(entryPath, nunjucks.renderString(entryTemplate, {
    routesPath: escapeWinPath(routesPath),
    root: escapeWinPath(root)
  }));
}

exports.start = function start(program) {
  var configFile = path.join(process.cwd(), program.config || 'bisheng.config.js');
  var bishengConfig = getBishengConfig(configFile);
  context.initialize({ bishengConfig: bishengConfig });
  mkdirp.sync(bishengConfig.output);

  generateEntryFile(configFile, bishengConfig.theme, bishengConfig.entryName, '/');

  var webpackConfig = (0, _updateWebpackConfig2.default)((0, _getWebpackCommonConfig2.default)(), 'start');
  webpackConfig.plugins.push(new webpack.HotModuleReplacementPlugin());
  webpackConfig.plugins.push(new _writeFileWebpackPlugin2.default());
  webpackConfig.plugins.push(new _htmlWebpackHarddiskPlugin2.default());
  var serverOptions = _extends({
    quiet: true,
    hot: true
  }, bishengConfig.devServerConfig, {
    contentBase: path.join(process.cwd(), bishengConfig.output),
    historyApiFallback: true,
    host: 'localhost'
  });
  WebpackDevServer.addDevServerEntrypoints(webpackConfig, serverOptions);
  var compiler = webpack(webpackConfig);

  // Ref: https://github.com/pigcan/blog/issues/6
  // Webpack startup recompilation fix. Remove when @sokra fixes the bug.
  // https://github.com/webpack/webpack/issues/2983
  // https://github.com/webpack/watchpack/issues/25
  var timefix = 11000;
  compiler.plugin('watch-run', function (watching, callback) {
    watching.startTime += timefix; // eslint-disable-line
    callback();
  });
  compiler.plugin('done', function (stats) {
    stats.startTime -= timefix; // eslint-disable-line
    var templateData = Object.assign({ root: '/' }, bishengConfig.htmlTemplateExtraData || {});
    var templatePath = path.join(process.cwd(), bishengConfig.output, 'index.html');
    var template = fs.readFileSync(templatePath).toString();
    fs.writeFileSync(templatePath, nunjucks.renderString(template, templateData));
  });

  var server = new WebpackDevServer(compiler, serverOptions);
  server.listen(bishengConfig.port, '0.0.0.0', function () {
    return (0, _openBrowser2.default)('http://localhost:' + bishengConfig.port);
  });
};

var ssrTemplate = fs.readFileSync(path.join(__dirname, 'ssr.nunjucks.js')).toString();

function filenameToUrl(filename) {
  if (filename.endsWith('index.html')) {
    return filename.replace(/index\.html$/, '');
  }
  return filename.replace(/\.html$/, '');
}
exports.build = function build(program, callback) {
  var configFile = path.join(process.cwd(), program.config || 'bisheng.config.js');
  var bishengConfig = getBishengConfig(configFile);
  context.initialize({
    bishengConfig: bishengConfig,
    isBuild: true
  });
  mkdirp.sync(bishengConfig.output);

  var entryName = bishengConfig.entryName;

  generateEntryFile(configFile, bishengConfig.theme, entryName, bishengConfig.root);
  var webpackConfig = (0, _updateWebpackConfig2.default)((0, _getWebpackCommonConfig2.default)(), 'build');
  webpackConfig.plugins.push(new webpack.LoaderOptionsPlugin({
    minimize: true
  }));
  webpackConfig.plugins.push(new _uglifyjsWebpackPlugin2.default({
    uglifyOptions: {
      output: {
        ascii_only: true
      }
    }
  }));
  webpackConfig.plugins.push(new webpack.DefinePlugin({
    'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'production')
  }));
  webpackConfig.plugins.push(new webpack.optimize.ModuleConcatenationPlugin());
  webpackConfig.plugins.push(new webpack.HashedModuleIdsPlugin());
  webpackConfig.plugins.push(new webpack.NamedChunksPlugin(function (chunk) {
    return chunk.name || 'faceless-chunk';
  }));
  webpackConfig.plugins.push(new webpack.optimize.CommonsChunkPlugin({
    name: 'runtime',
    minChunks: Infinity
  }));

  var ssrWebpackConfig = Object.assign({}, webpackConfig);
  var ssrPath = path.join(tmpDirPath, 'ssr.' + entryName + '.js');
  var routesPath = getRoutesPath(configFile, path.dirname(bishengConfig.theme), entryName);
  fs.writeFileSync(ssrPath, nunjucks.renderString(ssrTemplate, { routesPath: escapeWinPath(routesPath) }));

  ssrWebpackConfig.entry = _defineProperty({}, entryName + '-ssr', ssrPath);
  ssrWebpackConfig.target = 'node';
  ssrWebpackConfig.output = Object.assign({}, ssrWebpackConfig.output, {
    path: tmpDirPath,
    library: 'ssr',
    libraryTarget: 'commonjs'
  });
  ssrWebpackConfig.plugins = ssrWebpackConfig.plugins.filter(function (plugin) {
    return !(plugin instanceof webpack.optimize.CommonsChunkPlugin);
  });

  webpack(webpackConfig, function (err, stats) {
    if (err !== null) {
      return console.error(err);
    }

    if (stats.hasErrors()) {
      console.error(stats.toString('errors-only'));
      return;
    }

    var markdown = sourceData.generate(bishengConfig.source, bishengConfig.transformers);
    var themeConfig = require(bishengConfig.theme);
    var filesNeedCreated = generateFilesPath(themeConfig.routes, markdown).map(bishengConfig.filePathMapper);
    filesNeedCreated = R.unnest(filesNeedCreated);

    var templatePath = path.join(process.cwd(), bishengConfig.output, 'index.html');
    var template = fs.readFileSync(templatePath).toString();

    if (!program.ssr) {
      require('./loaders/common/boss').jobDone();
      var templateData = Object.assign({ root: bishengConfig.root }, bishengConfig.htmlTemplateExtraData || {});
      var fileContent = nunjucks.renderString(template, templateData);
      filesNeedCreated.forEach(function (file) {
        var output = path.join(bishengConfig.output, file);
        mkdirp.sync(path.dirname(output));
        fs.writeFileSync(output, fileContent);
        console.log('Created: ', output);
      });

      if (callback) {
        callback();
      }
      return;
    }

    context.turnOnSSRFlag();
    // If we can build webpackConfig without errors, we can build ssrWebpackConfig without errors.
    // Because ssrWebpackConfig are just part of webpackConfig.
    webpack(ssrWebpackConfig, function (_err, _stats) {
      if (_err !== null) {
        return console.error(_err);
      }
      if (_stats.hasErrors()) {
        console.error(_stats.toString('errors-only'));
        return;
      }

      require('./loaders/common/boss').jobDone();

      var assets = _stats.toJson().assetsByChunkName[entryName + '-ssr'];
      var entryJsAsset = typeof assets === 'string' ? assets : assets.filter(function (a) {
        return (/\.js$/.test(a)
        );
      })[0];

      var _require2 = require(path.join(tmpDirPath, entryJsAsset)),
          ssr = _require2.ssr;

      var fileCreatedPromises = filesNeedCreated.map(function (file) {
        var output = path.join(bishengConfig.output, file);
        mkdirp.sync(path.dirname(output));
        return new Promise(function (resolve) {
          ssr(filenameToUrl(file), function (error, content) {
            if (error) {
              console.error(error);
              process.exit(1);
            }
            var templateData = Object.assign({ root: bishengConfig.root, content: content }, bishengConfig.htmlTemplateExtraData || {});
            var fileContent = nunjucks.renderString(template, templateData);
            fs.writeFileSync(output, fileContent);
            console.log('Created: ', output);
            resolve();
          });
        });
      });
      Promise.all(fileCreatedPromises).then(function () {
        if (callback) {
          callback();
        }
      });
    });
  });
};

function pushToGhPages(basePath, config) {
  var options = _extends({}, config, {
    depth: 1,
    logger: function logger(message) {
      console.log(message);
    }
  });
  if (process.env.RUN_ENV_USER) {
    options.user = {
      name: process.env.RUN_ENV_USER,
      email: process.env.RUN_ENV_EMAIL
    };
  }
  ghPages.publish(basePath, options, function (err) {
    if (err) {
      throw err;
    }
    console.log('Site has been published!');
  });
}
exports.deploy = function deploy(program) {
  var config = {
    remote: program.remote,
    branch: program.branch
  };
  if (program.pushOnly) {
    var output = typeof program.pushOnly === 'string' ? program.pushOnly : './_site';
    var basePath = path.join(process.cwd(), output);
    pushToGhPages(basePath, config);
  } else {
    var configFile = path.join(process.cwd(), program.config || 'bisheng.config.js');
    var bishengConfig = getBishengConfig(configFile);
    var _basePath = path.join(process.cwd(), bishengConfig.output);
    exports.build(program, function () {
      return pushToGhPages(_basePath, config);
    });
  }
};